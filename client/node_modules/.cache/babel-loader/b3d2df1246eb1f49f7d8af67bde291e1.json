{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction';\nimport ChangeItem_Transaction from '../transactions/ChangeItem_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    itemActive: false,\n    listMarkedForDeletion: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.ADD_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter++,\n            isListNameEditActive: store.isItemEditActive,\n            isItemEditActive: store.isItemEditActive,\n            listMarkedForDeletion: store.listMarkedForDeletion\n          });\n        }\n\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n\n  store.addList = function () {\n    let newList = {\n      items: [\"?\", \"?\", \"?\", \"?\", \"?\"],\n      name: \"Untitled\" + store.newListCounter\n    };\n\n    async function asynceAddList(newList) {\n      let response = await api.createTop5List(newList);\n      store.setCurrentList(response.data.top5List._id);\n    }\n\n    storeReducer({\n      type: GlobalStoreActionType.ADD_LIST,\n      payload: {}\n    }); // setStore(prev => {\n    //     return {...prev, newListCounter: prev.newListCounter++};\n    // })\n\n    asynceAddList(newList);\n  }; // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        top5List.name = newName;\n\n        async function updateList(top5List) {\n          response = await api.updateTop5ListById(top5List._id, top5List);\n\n          if (response.data.success) {\n            async function getListPairs(top5List) {\n              response = await api.getTop5ListPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    top5List: top5List\n                  }\n                });\n              }\n            }\n\n            getListPairs(top5List);\n          }\n        }\n\n        updateList(top5List);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    tps.clearAllTransactions();\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getTop5ListPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: top5List\n          });\n          store.history.push(\"/top5list/\" + top5List._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.addMoveItemTransaction = function (start, end) {\n    let transaction = new MoveItem_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.addChangeItemTransaction = function (index, oldName, newName) {\n    let transaction = new ChangeItem_Transaction(store, index, oldName, newName);\n    tps.addTransaction(transaction);\n  };\n\n  store.moveItem = function (start, end) {\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i < end; i++) {\n        store.currentList.items[i] = store.currentList.items[i + 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } else if (start > end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i > end; i--) {\n        store.currentList.items[i] = store.currentList.items[i - 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } // NOW MAKE IT OFFICIAL\n\n\n    store.updateCurrentList();\n  };\n\n  store.updateCurrentList = function (index, name) {\n    store.currentList.items[index] = name;\n\n    async function asyncUpdateCurrentList() {\n      const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n\n    asyncUpdateCurrentList();\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"GdrgqzQdrFCovFE76xEv/VMPDOE=\");","map":{"version":3,"sources":["C:/Fall 2021 Cdrive/CSE 316/Top5Lists_HW3/Top5Lists_HW3/client/src/store/index.js"],"names":["createContext","useState","jsTPS","api","MoveItem_Transaction","ChangeItem_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","itemActive","listMarkedForDeletion","storeReducer","action","type","payload","ADD_LIST","isListNameEditActive","isItemEditActive","top5List","addList","newList","items","name","asynceAddList","response","createTop5List","setCurrentList","data","_id","changeListName","id","newName","asyncChangeListName","getTop5ListById","success","updateList","updateTop5ListById","getListPairs","getTop5ListPairs","pairsArray","closeCurrentList","clearAllTransactions","loadIdNamePairs","asyncLoadIdNamePairs","console","log","asyncSetCurrentList","history","push","addMoveItemTransaction","start","end","transaction","addTransaction","addChangeItemTransaction","index","oldName","moveItem","temp","i","updateCurrentList","asyncUpdateCurrentList","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive"],"mappings":"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","sourcesContent":["import { createContext, useState } from 'react'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api from '../api'\r\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\r\nimport ChangeItem_Transaction from '../transactions/ChangeItem_Transaction';\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\r\n}\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        itemActive: false,\r\n        listMarkedForDeletion: null\r\n    });\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n\r\n            case GlobalStoreActionType.ADD_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter++,\r\n                    isListNameEditActive: store.isItemEditActive,\r\n                    isItemEditActive: store.isItemEditActive,\r\n                    listMarkedForDeletion: store.listMarkedForDeletion,\r\n                });\r\n            }\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.top5List,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                })\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: true,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    store.addList = function (){\r\n        let newList = {\r\n            items: [\"?\", \"?\", \"?\", \"?\", \"?\"],\r\n            name: \"Untitled\"+ store.newListCounter\r\n        }\r\n\r\n        async function asynceAddList(newList){\r\n            let response = await api.createTop5List(newList);\r\n            store.setCurrentList(response.data.top5List._id);\r\n        }\r\n\r\n        storeReducer({type: GlobalStoreActionType.ADD_LIST,\r\n        payload: {}})\r\n        // setStore(prev => {\r\n        //     return {...prev, newListCounter: prev.newListCounter++};\r\n        // })\r\n        asynceAddList(newList); \r\n        \r\n    }\r\n\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST\r\n        async function asyncChangeListName(id) {\r\n            let response = await api.getTop5ListById(id);\r\n            if (response.data.success) {\r\n                let top5List = response.data.top5List;\r\n                top5List.name = newName;\r\n                async function updateList(top5List) {\r\n                    response = await api.updateTop5ListById(top5List._id, top5List);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(top5List) {\r\n                            response = await api.getTop5ListPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        top5List: top5List\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(top5List);\r\n                    }\r\n                }\r\n                updateList(top5List);\r\n            }\r\n        }\r\n        asyncChangeListName(id);\r\n    }\r\n\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        tps.clearAllTransactions();\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            const response = await api.getTop5ListPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                    payload: pairsArray\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    }\r\n\r\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\r\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\r\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\r\n    // moveItem, updateItem, updateCurrentList, undo, and redo\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getTop5ListById(id);\r\n            if (response.data.success) {\r\n                let top5List = response.data.top5List;\r\n\r\n                response = await api.updateTop5ListById(top5List._id, top5List);\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: top5List\r\n                    });\r\n                    store.history.push(\"/top5list/\" + top5List._id);\r\n                }\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    }\r\n    store.addMoveItemTransaction = function (start, end) {\r\n        let transaction = new MoveItem_Transaction(store, start, end);\r\n        tps.addTransaction(transaction);\r\n    }\r\n\r\n    store.addChangeItemTransaction = function (index, oldName, newName){\r\n        let transaction = new ChangeItem_Transaction(store, index, oldName, newName);\r\n        tps.addTransaction(transaction);\r\n    }\r\n    store.moveItem = function (start, end) {\r\n        start -= 1;\r\n        end -= 1;\r\n        if (start < end) {\r\n            let temp = store.currentList.items[start];\r\n            for (let i = start; i < end; i++) {\r\n                store.currentList.items[i] = store.currentList.items[i + 1];\r\n            }\r\n            store.currentList.items[end] = temp;\r\n        }\r\n        else if (start > end) {\r\n            let temp = store.currentList.items[start];\r\n            for (let i = start; i > end; i--) {\r\n                store.currentList.items[i] = store.currentList.items[i - 1];\r\n            }\r\n            store.currentList.items[end] = temp;\r\n        }\r\n\r\n        // NOW MAKE IT OFFICIAL\r\n        store.updateCurrentList();\r\n    }\r\n\r\n\r\n    store.updateCurrentList = function(index, name) {\r\n\r\n        store.currentList.items[index] = name;\r\n        async function asyncUpdateCurrentList() {\r\n            const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\r\n            if (response.data.success) {\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                    payload: store.currentList\r\n                });\r\n            }\r\n        }\r\n        asyncUpdateCurrentList();\r\n    }\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    }\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setIsListNameEditActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n    return { store, storeReducer };\r\n}"]},"metadata":{},"sourceType":"module"}