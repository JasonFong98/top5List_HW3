{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nimport jsTPS from \"../common/jsTPS\";\nimport api from \"../api\";\nimport MoveItem_Transaction from \"../transactions/MoveItem_Transaction\";\nimport ChangeItem_Transaction from \"../transactions/ChangeItem_Transaction\";\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    itemActive: false,\n    listMarkedForDeletion: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.ADD_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter++,\n            isListNameEditActive: store.isItemEditActive,\n            isItemEditActive: store.isItemEditActive,\n            listMarkedForDeletion: store.listMarkedForDeletion\n          });\n        }\n\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN\n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n\n  store.addList = function () {\n    let newList = {\n      items: [\"?\", \"?\", \"?\", \"?\", \"?\"],\n      name: \"Untitled\" + store.newListCounter\n    };\n\n    async function asynceAddList(newList) {\n      let response = await api.createTop5List(newList);\n      store.setCurrentList(response.data.top5List._id);\n    }\n\n    storeReducer({\n      type: GlobalStoreActionType.ADD_LIST,\n      payload: {}\n    }); // setStore(prev => {\n    //     return {...prev, newListCounter: prev.newListCounter++};\n    // })\n\n    asynceAddList(newList);\n  }; // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        top5List.name = newName;\n\n        async function updateList(top5List) {\n          response = await api.updateTop5ListById(top5List._id, top5List);\n\n          if (response.data.success) {\n            async function getListPairs(top5List) {\n              response = await api.getTop5ListPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    top5List: top5List\n                  }\n                });\n              }\n            }\n\n            getListPairs(top5List);\n          }\n        }\n\n        updateList(top5List);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    tps.clearAllTransactions();\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n    store.disableCloseButton();\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getTop5ListPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n    store.disableCloseButton();\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: top5List\n          });\n          store.history.push(\"/top5list/\" + top5List._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n    store.enableCloseButton();\n  };\n\n  store.hideDeleteListModal = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_CURRENT_LIST,\n      payload: null\n    });\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  store.deleteMarkedList = function () {\n    async function asyncDeleteList() {\n      let response = await api.deleteTop5ListById(store.currentList._id);\n\n      if (response.data.success) {\n        console.log(store.currentList);\n        let modal = document.getElementById(\"delete-modal\");\n        modal.classList.remove(\"is-visible\");\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: null\n        });\n      }\n    }\n\n    asyncDeleteList().catch(e => {\n      let modal = document.getElementById(\"delete-modal\");\n      modal.classList.remove(\"is-visible\");\n    });\n    store.loadIdNamePairs();\n  };\n\n  store.addMoveItemTransaction = function (start, end) {\n    let transaction = new MoveItem_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.addChangeItemTransaction = function (index, oldName, newName) {\n    let transaction = new ChangeItem_Transaction(store, index, oldName, newName);\n    tps.addTransaction(transaction);\n  };\n\n  store.moveItem = function (start, end) {\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i < end; i++) {\n        store.currentList.items[i] = store.currentList.items[i + 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } else if (start > end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i > end; i--) {\n        store.currentList.items[i] = store.currentList.items[i - 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } // NOW MAKE IT OFFICIAL\n\n\n    store.updateCurrentList();\n  };\n\n  store.showDeleteList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: top5List\n          });\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n\n  store.updateCurrentList = function (index, name) {\n    store.currentList.items[index] = name;\n\n    async function asyncUpdateCurrentList() {\n      const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n\n    asyncUpdateCurrentList();\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  store.disableCloseButton = function () {\n    let button = document.getElementById(\"close-button\");\n    button.classList.add(\"top5-button-disabled\");\n    console.log(\"hi\");\n  };\n\n  store.enableCloseButton = function () {\n    let button = document.getElementById(\"close-button\");\n    button.classList.remove(\"top5-button-disabled\");\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"hnnsXXM39eXtkdR9DQ0zYZsI81M=\");","map":{"version":3,"sources":["C:/Fall 2021 Cdrive/CSE 316/Top5Lists_HW3/Top5Lists_HW3/client/src/store/index.js"],"names":["createContext","useState","jsTPS","api","MoveItem_Transaction","ChangeItem_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","itemActive","listMarkedForDeletion","storeReducer","action","type","payload","ADD_LIST","isListNameEditActive","isItemEditActive","top5List","addList","newList","items","name","asynceAddList","response","createTop5List","setCurrentList","data","_id","changeListName","id","newName","asyncChangeListName","getTop5ListById","success","updateList","updateTop5ListById","getListPairs","getTop5ListPairs","pairsArray","closeCurrentList","clearAllTransactions","disableCloseButton","loadIdNamePairs","asyncLoadIdNamePairs","console","log","asyncSetCurrentList","history","push","enableCloseButton","hideDeleteListModal","modal","document","getElementById","classList","remove","deleteMarkedList","asyncDeleteList","deleteTop5ListById","catch","e","addMoveItemTransaction","start","end","transaction","addTransaction","addChangeItemTransaction","index","oldName","moveItem","temp","i","updateCurrentList","showDeleteList","add","asyncUpdateCurrentList","undo","undoTransaction","redo","doTransaction","button","setIsListNameEditActive"],"mappings":"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","sourcesContent":["import { createContext, useState } from \"react\";\r\nimport jsTPS from \"../common/jsTPS\";\r\nimport api from \"../api\";\r\nimport MoveItem_Transaction from \"../transactions/MoveItem_Transaction\";\r\nimport ChangeItem_Transaction from \"../transactions/ChangeItem_Transaction\";\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\r\n};\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n  const [store, setStore] = useState({\r\n    idNamePairs: [],\r\n    currentList: null,\r\n    newListCounter: 0,\r\n    listNameActive: false,\r\n    itemActive: false,\r\n    listMarkedForDeletion: null,\r\n  });\r\n\r\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n  // HANDLE EVERY TYPE OF STATE CHANGE\r\n  const storeReducer = (action) => {\r\n    const { type, payload } = action;\r\n    switch (type) {\r\n      // LIST UPDATE OF ITS NAME\r\n\r\n      case GlobalStoreActionType.ADD_LIST: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: store.currentList,\r\n          newListCounter: store.newListCounter++,\r\n          isListNameEditActive: store.isItemEditActive,\r\n          isItemEditActive: store.isItemEditActive,\r\n          listMarkedForDeletion: store.listMarkedForDeletion,\r\n        });\r\n      }\r\n      case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n        return setStore({\r\n          idNamePairs: payload.idNamePairs,\r\n          currentList: payload.top5List,\r\n          newListCounter: store.newListCounter,\r\n          isListNameEditActive: false,\r\n          isItemEditActive: false,\r\n          listMarkedForDeletion: null,\r\n        });\r\n      }\r\n      // STOP EDITING THE CURRENT LIST\r\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: null,\r\n          newListCounter: store.newListCounter,\r\n          isListNameEditActive: false,\r\n          isItemEditActive: false,\r\n          listMarkedForDeletion: null,\r\n        });\r\n      }\r\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n        return setStore({\r\n          idNamePairs: payload,\r\n          currentList: null,\r\n          newListCounter: store.newListCounter,\r\n          isListNameEditActive: false,\r\n          isItemEditActive: false,\r\n          listMarkedForDeletion: null,\r\n        });\r\n      }\r\n      // UPDATE A LIST\r\n      case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: payload,\r\n          newListCounter: store.newListCounter,\r\n          isListNameEditActive: false,\r\n          isItemEditActive: false,\r\n          listMarkedForDeletion: null,\r\n        });\r\n      }\r\n      // START EDITING A LIST NAME\r\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: payload,\r\n          newListCounter: store.newListCounter,\r\n          isListNameEditActive: true,\r\n          isItemEditActive: false,\r\n          listMarkedForDeletion: null,\r\n        });\r\n      }\r\n      default:\r\n        return store;\r\n    }\r\n  };\r\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN\r\n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n  store.addList = function () {\r\n    let newList = {\r\n      items: [\"?\", \"?\", \"?\", \"?\", \"?\"],\r\n      name: \"Untitled\" + store.newListCounter,\r\n    };\r\n\r\n    async function asynceAddList(newList) {\r\n      let response = await api.createTop5List(newList);\r\n      store.setCurrentList(response.data.top5List._id);\r\n    }\r\n\r\n    storeReducer({ type: GlobalStoreActionType.ADD_LIST, payload: {} });\r\n    // setStore(prev => {\r\n    //     return {...prev, newListCounter: prev.newListCounter++};\r\n    // })\r\n    asynceAddList(newList);\r\n  };\r\n\r\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n  store.changeListName = function (id, newName) {\r\n    // GET THE LIST\r\n    async function asyncChangeListName(id) {\r\n      let response = await api.getTop5ListById(id);\r\n      if (response.data.success) {\r\n        let top5List = response.data.top5List;\r\n        top5List.name = newName;\r\n        async function updateList(top5List) {\r\n          response = await api.updateTop5ListById(top5List._id, top5List);\r\n          if (response.data.success) {\r\n            async function getListPairs(top5List) {\r\n              response = await api.getTop5ListPairs();\r\n              if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                  payload: {\r\n                    idNamePairs: pairsArray,\r\n                    top5List: top5List,\r\n                  },\r\n                });\r\n              }\r\n            }\r\n            getListPairs(top5List);\r\n          }\r\n        }\r\n        updateList(top5List);\r\n      }\r\n    }\r\n    asyncChangeListName(id);\r\n  };\r\n\r\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n  store.closeCurrentList = function () {\r\n    tps.clearAllTransactions();\r\n    storeReducer({\r\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n      payload: {},\r\n    });\r\n    store.disableCloseButton();\r\n  };\r\n\r\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n  store.loadIdNamePairs = function () {\r\n    async function asyncLoadIdNamePairs() {\r\n      const response = await api.getTop5ListPairs();\r\n      if (response.data.success) {\r\n        let pairsArray = response.data.idNamePairs;\r\n        storeReducer({\r\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n          payload: pairsArray,\r\n        });\r\n      } else {\r\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n      }\r\n    }\r\n\r\n    asyncLoadIdNamePairs();\r\n    store.disableCloseButton();\r\n  };\r\n\r\n  // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\r\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\r\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\r\n  // moveItem, updateItem, updateCurrentList, undo, and redo\r\n  store.setCurrentList = function (id) {\r\n    async function asyncSetCurrentList(id) {\r\n      let response = await api.getTop5ListById(id);\r\n      if (response.data.success) {\r\n        let top5List = response.data.top5List;\r\n\r\n        response = await api.updateTop5ListById(top5List._id, top5List);\r\n        if (response.data.success) {\r\n          storeReducer({\r\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n            payload: top5List,\r\n          });\r\n          store.history.push(\"/top5list/\" + top5List._id);\r\n        }\r\n      }\r\n    }\r\n    asyncSetCurrentList(id);\r\n    store.enableCloseButton();\r\n  };\r\n\r\n  store.hideDeleteListModal = function () {\r\n    storeReducer({\r\n      type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n      payload: null,\r\n    });\r\n\r\n    let modal = document.getElementById(\"delete-modal\");\r\n    modal.classList.remove(\"is-visible\");\r\n  };\r\n\r\n  store.deleteMarkedList = function () {\r\n    async function asyncDeleteList() {\r\n      let response = await api.deleteTop5ListById(store.currentList._id);\r\n      if (response.data.success) {\r\n        console.log(store.currentList);\r\n        let modal = document.getElementById(\"delete-modal\");\r\n        modal.classList.remove(\"is-visible\");\r\n\r\n        storeReducer({\r\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n          payload: null,\r\n        });\r\n      }\r\n    }\r\n\r\n    asyncDeleteList().catch((e) => {\r\n      let modal = document.getElementById(\"delete-modal\");\r\n      modal.classList.remove(\"is-visible\");\r\n    });\r\n    store.loadIdNamePairs();\r\n  };\r\n\r\n  store.addMoveItemTransaction = function (start, end) {\r\n    let transaction = new MoveItem_Transaction(store, start, end);\r\n    tps.addTransaction(transaction);\r\n  };\r\n\r\n  store.addChangeItemTransaction = function (index, oldName, newName) {\r\n    let transaction = new ChangeItem_Transaction(\r\n      store,\r\n      index,\r\n      oldName,\r\n      newName\r\n    );\r\n    tps.addTransaction(transaction);\r\n  };\r\n  store.moveItem = function (start, end) {\r\n    start -= 1;\r\n    end -= 1;\r\n    if (start < end) {\r\n      let temp = store.currentList.items[start];\r\n      for (let i = start; i < end; i++) {\r\n        store.currentList.items[i] = store.currentList.items[i + 1];\r\n      }\r\n      store.currentList.items[end] = temp;\r\n    } else if (start > end) {\r\n      let temp = store.currentList.items[start];\r\n      for (let i = start; i > end; i--) {\r\n        store.currentList.items[i] = store.currentList.items[i - 1];\r\n      }\r\n      store.currentList.items[end] = temp;\r\n    }\r\n\r\n    // NOW MAKE IT OFFICIAL\r\n    store.updateCurrentList();\r\n  };\r\n\r\n  store.showDeleteList = function (id) {\r\n    async function asyncSetCurrentList(id) {\r\n      let response = await api.getTop5ListById(id);\r\n      if (response.data.success) {\r\n        let top5List = response.data.top5List;\r\n\r\n        response = await api.updateTop5ListById(top5List._id, top5List);\r\n        if (response.data.success) {\r\n          storeReducer({\r\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n            payload: top5List,\r\n          });\r\n        }\r\n      }\r\n    }\r\n    asyncSetCurrentList(id);\r\n\r\n    let modal = document.getElementById(\"delete-modal\");\r\n    modal.classList.add(\"is-visible\");\r\n  };\r\n\r\n  store.updateCurrentList = function (index, name) {\r\n    store.currentList.items[index] = name;\r\n    async function asyncUpdateCurrentList() {\r\n      const response = await api.updateTop5ListById(\r\n        store.currentList._id,\r\n        store.currentList\r\n      );\r\n      if (response.data.success) {\r\n        storeReducer({\r\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n          payload: store.currentList,\r\n        });\r\n      }\r\n    }\r\n    asyncUpdateCurrentList();\r\n  };\r\n  store.undo = function () {\r\n    tps.undoTransaction();\r\n  };\r\n  store.redo = function () {\r\n    tps.doTransaction();\r\n  };\r\n\r\n  store.disableCloseButton = function (){\r\n    let button = document.getElementById(\"close-button\");\r\n    button.classList.add(\"top5-button-disabled\");\r\n    console.log(\"hi\");\r\n  }\r\n\r\n  store.enableCloseButton = function(){\r\n    let button = document.getElementById(\"close-button\");\r\n    button.classList.remove(\"top5-button-disabled\");\r\n  }\r\n\r\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n  store.setIsListNameEditActive = function () {\r\n    storeReducer({\r\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n      payload: null,\r\n    });\r\n  };\r\n\r\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n  return { store, storeReducer };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}